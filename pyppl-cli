#!/usr/bin/env python

import argparse
import json
from glob import glob
from datetime import datetime

from os import path
from shutil import rmtree

parser           = argparse.ArgumentParser(description='A set of CLI tools for pyppl.')
parser.add_argument('-w', '--workdir', help="The path of workdir, default: %(default)s", required=False, default="./workdir")
cmdparsers       = parser.add_subparsers(dest='command')
parser_clean     = cmdparsers.add_parser('clean', help="Clean a workdir")
parser_clean.add_argument ('-f', '--force', help="Force cleaning, don't ask for confirmation.", action='store_true')
parser_clean.set_defaults(force = False)
parser_list      = cmdparsers.add_parser('list', help="List the status of a workdir")
args             = parser.parse_args()

def mtimeFromCacheFile (cachefile):
	if not path.exists (cachefile):
		return 0
	cachestr  = open (cachefile).read().strip()
	if not cachestr:
		return 0

	cache = json.loads(cachestr)
	ret = float(cache['script'].split('@')[-1])

	if  cache['in']['file'].values():
		ret = max (ret, max([float(val.split('@')[-1]) for val in cache['in']['file'].values()]))

	for val in cache['in']['files'].values():
		if val:
			ret = max (ret, max([float (v.split('@')[-1]) for v in val]))
				
	if cache['out']['file'].values():
		ret = max (ret, max([float(val.split('@')[-1] if '@' in val else 0) for val in cache['out']['file'].values()])) 
	if cache['out']['dir'].values():
		ret = max (ret, max([float(val.split('@')[-1] if '@' in val else 0) for val in cache['out']['dir'].values()]))

	return ret

def mtime4proc (procdir):
	jobdirs  = glob (path.join(procdir, "*"))
	ret      = 0
	for jobdir in jobdirs:
		cachefile = path.join (jobdir, "job.cache")
		mtime     = mtimeFromCacheFile(cachefile)
		if mtime == 0:
			return 0
		if mtime > ret:
			ret = mtime
	return ret

def getGroups (workdir):
	ret = {}
	procs = sorted ([path.basename(x) for x in glob (path.join(workdir, "PyPPL.*"))])
	for proc in procs:
		ppath = path.join (workdir, proc)
		if not path.isdir (ppath):
			continue
		parts = proc.split ('.')
		pname = '.'.join(parts[1:-1])
		if not ret.has_key(pname):
			ret[pname] = []
		ret[pname].append(parts[-1])
	return ret

fmtTime = lambda x: datetime.fromtimestamp(x).strftime('%Y-%m-%d %H:%M:%S')
		
if args.command == 'list':
	print "\nWORKDIR: " + args.workdir + " (Yellow processes are to be cleaned!)"
	print "-" * (len (args.workdir) + 47)

	groups = getGroups (args.workdir)
	
	if not groups:
		print "No processes found!\n"
	
	for g, sufs in groups.iteritems():
		print "\n- PROCESSES: %s" % g
		print "  " + "-" * 36
		
		ptimes = {}
		for suf in sufs:
			procpath = path.join (args.workdir, "PyPPL.%s.%s" % (g, suf))
			ptimes[suf] = mtime4proc(procpath)

		for i, suf in enumerate(sorted(ptimes, key=ptimes.get, reverse=True)):
			if i == 0 and ptimes[suf] != 0:
				print '\033[92m  ' + suf + ': ' + fmtTime(ptimes[suf]) + '\033[0m'
			else:
				print '\033[93m  ' + suf + ': ' + fmtTime(ptimes[suf]) + '\033[0m'
				
elif args.command == 'clean':
	print "\nWORKDIR: " + args.workdir 
	print "-" * (len (args.workdir) + 9)

	groups = getGroups (args.workdir)
	
	if not groups:
		print "No processes found!\n"
	
	for g, sufs in groups.iteritems():
		print "\n- PROCESSES: %s" % g
		print "  " + "-" * 36
		
		ptimes = {}
		for suf in sufs:
			procpath = path.join (args.workdir, "PyPPL.%s.%s" % (g, suf))
			ptimes[suf] = mtime4proc(procpath)
				
		for i, suf in enumerate(sorted(ptimes, key=ptimes.get, reverse=True)):
			if i == 0 and ptimes[suf] != 0:
				print '\033[92m  ' + suf + ': ' + fmtTime(ptimes[suf]) + '\033[0m'
			else:
				#print '\033[93m  ' + suf + ': ' + ptimes[suf] + '\033[0m, clean it? [Y/n]',
				procpath = path.join (args.workdir, "PyPPL.%s.%s" % (g, suf))
				if not args.force:
					dists = ['', 'Y', 'y', 'N', 'n']
					r     = raw_input('\033[93m  ' + suf + ': ' + fmtTime(ptimes[suf]) + '\033[0m, clean it? [Y/n] ')
					while r not in dists:
						r     = raw_input('\033[93m  ' + suf + ': ' + fmtTime(ptimes[suf]) + '\033[0m, clean it? [Y/n] ')
					if r in ['', 'Y', 'y']:
						rmtree(procpath)
						print "  Removed: " + procpath
				else:
					rmtree(procpath)
					print '  Cleaned: \033[93m  ' + suf + ': ' + fmtTime(ptimes[suf]) + '\033[0m'
